fn mergesort (arr: &[i8]) {
	if arr.len <= 1 { return; }
	let mid = len(arr) / 2;
	let left = arr[..mid-1];
	let right = arr[mid..];
	mergesort(left);
	mergesort(right);
	merge(arr, left, right);
}

fn merge (dst: &[i8], left: &[i8], right: &[i8]) {
	let i = 0;
	let j = 0;
	let k = 0;
	while i < len(left) && j < len(right) {
		if left[i] <= right[j] {
			dst[k] = left[i];
			i = i + 1;
			k = k + 1;
		}
		else {
			dst[k] = right[j];
			j = j + 1;
			k = k + 1;
		}
	}
	while i < len(left) {
		dst[k] = left[i];
		i = i + 1;
		k = k + 1;
	}
	while j < len(right) {
		dst[k] = right[j];
		j = j + 1;
		k = k + 1;
	}
}

fn main () {
	let arr = [1, 0, -3, -1, 4];
	mergesort(&arr);
}
